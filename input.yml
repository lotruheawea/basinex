# Basin extractor configuration file

# Required: Output location, all data will be writen to outpath/gauge_id/
outpath: /path/to/output/

# Required: flowaccumulation
flowacc: /path/to/facc.asc

# Required: flowdirection
flowdir: /path/to/fdir.asc

# Required: gauging data lookup table
# Structure of the table:
#     - A simple text table with seperator ';'
#     - if the basin should be delineated, the following fields are required:
#       'id':   an unique gauging station identifier
#       'size': size of the catchment
#       'y':    y coordinate of the gauging station
#       'x':    x coordinate of the gauging station
#     - if an pre processed basin mask should be used, the following fields
#       are required:
#       'id':      an unique basin identifier
#       'path':    path to the mask file
#       'varname': name of the mask variable (optional, only needed if the
#                  mask is stored in a netcdf file)
gauges: /path/to/lut.txt

# Optional: perform a latitude correction for the given basin size (default: False)
#     - AREA = N_cells * res_x * ( cos(LAT) * res_y ) * scaling factor^2
latitude-size-correction: False

# Required: gauge matching parameters
# Note:
#     The gauge matching is based on the flowaccumulation data. The value for
#     any given cell in the flowaccumulation grid is interpreted as the size
#     [in cells] of a river basin drainig into the respective cell.
#
#     During gauge matching the flowaccumulation grid is searched for a cell
#     with a corresponding basin size close to the given gauge basin size. The
#     search radius will be increased succesively and can be limited to a
#     maximum size. As soon as a matching cell is found (error between catchment
#     sizes is smaller than the given maximum error) the search ends.
matching:
    # scaling factor to account for the (possible) unit differences between the
    # flowaccumulation and the gauging data. In order to make the data comparable
    # the effective flowaccumulation will be caclulated as:
    #     flowaccumulation_value * (cellsize * scaling_factor)^2
    scaling_factor: .001
    # maximum distance [in map units] around a given gauging station location
    # to search for a matching cell
    max_distance: 800
    # maximum error, as a fraction of the given basin size
    max_error: 0.8

# Optional: Write the delineated basin
mask:
    # Optional: file name of the mask grid (default: 'mask.asc')
    fname: basin.asc
    # output subdirectory
    outpath: morph

# Optional: Write the gauge basin
gauge:
    # Optional: file name of the gauge grid (default: 'idgauges.asc')
    fname: idgauges.asc
    # output subdirectory
    outpath: morph


# Optional: Any number of grid files to extract.
# Note:
#     currently only the formats ArcAscii and GeoTIFF are supported
#     flow accumulation and flow direction won't be written unless listed here
gridfiles:
    - fname: /path/to/input/facc.asc
      # Optional: output subdirectory under outpath/gauge_id
      outpath: morph
    - fname: /path/to/input/input1.asc
      outpath: morph
    - fname: /path/to/input/input2.asc
      outpath: luse

# Optional: Any number of netcdf files to extract.
# Note:
#     In order to extract from netcdf, coordinate values must be given.
#     Example:
#         If your data variables depend on the three dimensions 'time', 'y', 'x'
#         your file should also contain the two one-dimensional (!) variables
#         'y' (depending solely on the dimension 'y') and 'x' (depending solely
#         on the dimension 'x').
#     Tools like 'cdo' tend to silently remove variables, so double check,
#     that this information is avaialable
ncfiles:
    - fname: /path/to/input/input1.nc
      # Optional: output subdirectory under outpath/gauge_id
      outpath: meteo
      # Required: name of the (1D-) variable holding the y coordinates
      ydim: northing
      # Required: name of the (1D-) variable holding the x coordinates
      xdim: easting
      # Optional:
      #     Coordinates of spatial data are definied on a certain location
      #     of the cell they belong to (e.g. upper or lower left corner).
      #     All the supported file formats handle coordinates transparently,
      #     with excpetion of netcdf.
      #
      #     To account for the flexibility the format offers, it is possible
      #     to specify the fraction of a cell the origin is shifted from
      #     the upper left corner in x and y direction.
      #
      #     The bounding box of the dataset (an imaginary box, that contains
      #     exactly the entire spatial domain) is then caclulated as:
      #         ymin = min(y_values) - (cellsize * (1 - y_shift))
      #         ymax = max(y_values) + (cellsize * y_shift)
      #         xmin = min(x_values) - (cellsize * (1 - x_shift))
      #         xmax = max(x_values) + (cellsize * x_shift)
      #
      #     Examples:
      #         - Your coordinate values specify the upper left corner of a cell
      #           y_shift: 0
      #           x_shift: 0
      #         - Your coordinate values specify the center of a cell:
      #           y_shift: 0.5
      #           x_shift: 0.5
      #         - Your coordinate values specify the lower left corner of a cell
      #           y_shift: 1
      #           x_shift: 0
      #
      #     Default: lower left corner, i.e:
      #         y_shift: 1
      #         x_shift: 0
      #
      y_shift: .5
      x_shift: .5

    - fname: /path/to/input/input2.nc
      outpath: meteo
      ydim: 'y'
      xdim: 'x'
